const User=require("../models/User"),{verifyTokenAndAuthorization,verifyTokenAndAdmin}=require("./verifyToken"),router=require("express").Router();router.put("/:id",verifyTokenAndAuthorization,(async(t,e)=>{t.body.password&&(t.body.password=CryptoJS.AES.encrypt(t.body.password,process.env.PASS_SEC).toString());try{const s=await User.findByIdAndUpdate(t.params.id,{$set:t.body},{new:!0});e.status(200).json(s)}catch(t){e.status(500).json(t)}})),router.delete("/:id",verifyTokenAndAuthorization,(async(t,e)=>{try{await User.findByIdAndDelete(t.params.id),e.status(200).json("User has been deleted")}catch(t){e.status(500).json(t)}})),router.get("/find/:id",verifyTokenAndAdmin,(async(t,e)=>{try{const s=await User.findById(t.params.id),{password:r,...n}=s._doc;e.status(200).json(n)}catch(t){e.status(500).json(t)}})),router.get("/",verifyTokenAndAdmin,(async(t,e)=>{const s=t.query.new;try{const t=s?await User.find().sort({_id:-1}).limit(5):await User.find();e.status(200).json(t)}catch(t){e.status(500).json(t)}})),router.get("/stats",verifyTokenAndAdmin,(async(t,e)=>{const s=new Date,r=new Date(s.setFullYear(s.getFullYear()-1));try{const t=await User.aggregate([{$match:{createdAt:{$gte:r}}},{$project:{month:{$month:"$createdAt"}}},{$group:{_id:"$month",total:{$sum:1}}}]);e.status(200).json(t)}catch(t){e.status(500).json(t)}})),module.exports=router;