const Order=require("../models/Order"),{verifyTokenAndAuthorization,verifyTokenAndAdmin}=require("./verifyToken"),router=require("express").Router();router.post("/",(async(t,e)=>{const n=new Order(t.body);try{const t=await n.save();e.status(200).json(t)}catch(t){e.status(500).json(t)}})),router.put("/:id",verifyTokenAndAdmin,(async(t,e)=>{try{const n=await Order.findByIdAndUpdate(t.params.id,{$set:t.body},{new:!0});e.status(200).json(n)}catch(t){e.status(500).json(t)}})),router.delete("/:id",verifyTokenAndAdmin,(async(t,e)=>{try{await Order.findByIdAndDelete(t.params.id),e.status(200).json("Order has been deleted")}catch(t){e.status(500).json(t)}})),router.get("/find/:userId",verifyTokenAndAuthorization,(async(t,e)=>{try{const n=await Order.find({userId:t.params.userId});e.status(200).json(n)}catch(t){e.status(500).json(t)}})),router.get("/",verifyTokenAndAdmin,(async(t,e)=>{try{const t=await Order.find();e.status(200).json(t)}catch(t){e.status(500).json(t)}})),router.get("/income",verifyTokenAndAdmin,(async(t,e)=>{const n=new Date,r=new Date(n.setMonth(n.getMonth()-1)),s=new Date((new Date).setMonth(r.getMonth()-1));try{const t=await Order.aggregate([{$match:{createdAt:{$gte:s}}},{$project:{month:{$month:"$createdAt"},sales:"$amount"}},{$group:{_id:"$month",total:{$sum:"$sales"}}}]);e.status(200).json(t)}catch(t){e.status(500).json(t)}})),module.exports=router;