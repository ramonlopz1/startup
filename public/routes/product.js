const Product=require("../models/Product"),{verifyTokenAndAuthorization,verifyTokenAndAdmin}=require("./verifyToken"),router=require("express").Router();router.post("/",verifyTokenAndAdmin,(async(t,e)=>{const n=new Product(t.body);try{const t=await n.save();e.status(200).json(t)}catch(t){e.status(500).json(t)}})),router.put("/:id",verifyTokenAndAdmin,(async(t,e)=>{try{const n=await Product.findByIdAndUpdate(t.params.id,{$set:t.body},{new:!0});e.status(200).json(n)}catch(t){e.status(500).json(t)}})),router.delete("/:id",verifyTokenAndAdmin,(async(t,e)=>{try{await Product.findByIdAndDelete(t.params.id),e.status(200).json("Product has been deleted")}catch(t){e.status(500).json(t)}})),router.get("/find/:id",(async(t,e)=>{try{const n=await n.findById(t.params.id);e.status(200).json(n)}catch(t){e.status(500).json(t)}})),router.get("/",(async(t,e)=>{const n=t.query.new,r=t.query.category;try{let t;t=n?await Product.find().sort({createdAt:-1}).limit(1):r?await Product.find({categories:{$in:[r]}}):await Product.find(),e.status(200).json(t)}catch(t){e.status(500).json(t)}})),module.exports=router;